'''
Brief: Provides current pose to navigation nodes
Subscriptions: 
Publishes: robot's pose transformed onto map frame
'''

import rclpy
from rclpy.node import Node
from rclpy.qos import qos_profile_sensor_data

from nav_msgs.msg import OccupancyGrid
from geometry_msgs.msg import PoseStamped

import tf2_ros
from tf2_ros import LookupException, ConnectivityException, ExtrapolationException


class CurrentPose(Node):
    def __init__(self):
        super().__init__('currentpose')

        self.map_subscription = self.create_subscription(
            OccupancyGrid,
            'map',
            self.map_callback,
            qos_profile_sensor_data
        )
        self.map_subscription

        self.pose_publisher = self.create_publisher(
            PoseStamped,
            'currentpose',
            qos_profile_sensor_data
        )

        # Listener to transform robot's pose onto the map frame
        self.tfBuffer = tf2_ros.Buffer()
        self.tfListener = tf2_ros.TransformListener(self.tfBuffer, self)

    def map_callback(self, msg):
        self.get_logger().info('Map Received!')
        self.publish_pose()

    def publish_pose(self):
        # Get the robot's position in the map frame
        try:
            now = rclpy.time.Time()
            transform = self.tfBuffer.lookup_transform(
                'map',
                'base_link',
                now
            )

            currentpose = PoseStamped()
            currentpose.header.stamp = now.to_msg()
            currentpose.header.frame_id = 'map'
            currentpose.pose.position.x = transform.transform.translation.x
            currentpose.pose.position.y = transform.transform.translation.y
            currentpose.pose.orientation = transform.transform.rotation
            
            self.pose_publisher.publish(currentpose)
            self.get_logger().info('Pose published successfully!')
            
        except (LookupException, ConnectivityException, ExtrapolationException) as e:
            self.get_logger().error(f'Failed to get robot pose: {e}')
            
def main(args=None):
    rclpy.init(args=args)
    currentpose = CurrentPose()
    rclpy.spin(currentpose)
    currentpose.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
